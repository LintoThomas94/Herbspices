<head>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <style>
    :root {
      --primary-color: #6a11cb;
      --secondary-color: #2575fc;
      --card-bg: #ffffff;
      --body-bg: #f5f7fa;
      --text-dark: #333;
      --text-light: #666;
      --border-light: #e0e6ed;
      --shadow-subtle: rgba(0, 0, 0, 0.05);
    }

    body {
      background: var(--body-bg);
      font-family: 'Inter', sans-serif;
      color: var(--text-dark);
    }

    /* Fixed Header Styles */
    .header {
      position: fixed; /* Make the header stick to the top */
      top: 0;
      left: 0;
      width: calc(100% - 220px); /* Adjust for the fixed sidebar */
      height: 90px; /* Give the header a fixed height */
      background: white;
      z-index: 1000; /* Ensure the header is always on top */
      padding: 10px 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      box-shadow: 0 2px 6px rgba(0,0,0,0.1);
      margin-left: 260px;
    }

    .page-title { font-size: 26px; font-weight: bold; color: #2c3e50; }

    /* Adjust main content padding to prevent it from being hidden behind the fixed header */
    .main-content { padding: 88px 8px 8px 8px; margin-left: 220px; }

    .search-container {
      display: flex; align-items: center; background: #f5f7fa;
      border-radius: 30px; padding: 5px 15px;
      box-shadow: 0 2px 6px rgba(0,0,0,0.1);
    }
    .search-input { border: none; outline: none; padding: 8px 12px; font-size: 14px; flex: 1; background: transparent; }
    .search-btn { border: none; background: #3498db; border-radius: 50%; padding: 8px; cursor: pointer; }
    .search-btn svg { fill: #ffffff; }

    .card {
      border: none;
      border-radius: 1rem;
      box-shadow: 0 8px 20px var(--shadow-subtle);
    }

    .form-label { font-weight: 600; color: var(--text-light); font-size: 0.875rem; }
    .form-control {
      border-radius: 0.5rem;
      border: 1px solid var(--border-light);
      padding: 0.75rem 1rem;
    }
    .form-control:focus {
      border-color: var(--secondary-color);
      box-shadow: 0 0 0 3px rgba(37, 117, 252, 0.1);
    }

    .btn-gradient {
      background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
      border: none; color: white !important; font-weight: 600;
      border-radius: 0.75rem; padding: 0.6rem 1.2rem;
      transition: 0.3s ease;
    }
    .btn-gradient:hover { opacity: 0.9; transform: translateY(-1px); }

    .table th {
      background-color: var(--body-bg);
      color: var(--text-light);
      font-weight: 600; font-size: 0.8rem;
      text-transform: uppercase;
    }
    .table td { background-color: var(--card-bg); vertical-align: middle; }

    .badge { font-size: 0.75rem; padding: 0.4em 0.8em; border-radius: 20px; }

    /* Pagination */
    .custom-pagination .page-link {
      border-radius: 50px !important; margin: 0 4px;
      padding: 8px 15px; border: none; color: var(--secondary-color);
      font-weight: 600; background: var(--card-bg);
      box-shadow: 0 3px 6px var(--shadow-subtle);
      transition: 0.3s ease-in-out;
    }
    .custom-pagination .active .page-link {
      background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
      color: #fff;
    }
    
    /* Hide pagination when searching */
    .pagination-hidden {
      display: none !important;
    }
    
    /* No results message */
    .no-results {
      text-align: center;
      padding: 20px;
      color: var(--text-light);
      font-style: italic;
    }
  </style>
</head>

<body>
  <%- include("../../views/partials/admin/header") %>

  <header class="header">
    <h1 class="page-title">Category</h1>
    <div class="search-container">
      <input type="text" id="searchInput" class="search-input" placeholder="Search ...">
      <button class="search-btn" onclick="searchCategories()">
        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24">
          <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 
                   16 11.11 16 9.5 16 5.91 13.09 3 
                   9.5 3S3 5.91 3 9.5 5.91 16 9.5 
                   16c1.61 0 3.09-.59 4.23-1.57l.27.28
                   v.79l5 4.99L20.49 19l-4.99-5z" />
        </svg>
      </button>
    </div>
  </header>
  
  <main class="main-content">
    <div class="row mb-4">
      <div class="col-12">
        <div class="card p-4">
          <h5 class="mb-4" style="color: var(--primary-color);">
            <i class="bi bi-plus-circle"></i> Add New Category
          </h5>
          <form method="post" action="/admin/addCategory" onsubmit="return handleFormSubmit(event)">
            <div class="mb-3">
              <label class="form-label">Name</label>
              <input type="text" name="name" class="form-control" placeholder="Enter category name" required>
            </div>
            <div class="mb-3">
              <label class="form-label">Description</label>
              <textarea name="description" class="form-control" placeholder="Enter description" rows="3" required></textarea>
            </div>
            <button class="btn btn-gradient w-100">Create Category</button>
          </form>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col-12">
        <div class="card p-3">
          <div class="d-flex justify-content-between align-items-center mb-3">
            <h5 class="m-0" style="color: var(--primary-color);">
              <i class="bi bi-list-ul"></i> Category List
            </h5>
          </div>

          <div class="table-responsive">
            <table class="table align-middle">
              <thead>
                <tr>
                  <th>#</th>
                  <th>Name</th>
                  <th>Description</th>
                  <th>Offer Price</th>
                  <th>Offer</th>
                  <th>Status</th>
                  <th>Actions</th>
                  <th>Edit</th>
                  <!-- <th>Delete</th> -->
                </tr>
              </thead>
              <tbody id="categoryTableBody">
                <% cat.forEach((category, index) => { %>
                  <tr class="category-row" data-name="<%= category.name.toLowerCase() %>" data-description="<%= category.description.toLowerCase() %>">
                    <td><%= index + 1 %></td>
                    <td><b><%= category.name %></b></td>
                    <td class="text-truncate" style="max-width: 250px;"><%= category.description %></td>
                    <td><%= category.categoryOffer ? category.categoryOffer + '%' : '0' %></td>
                    <td>
                      <% if (category.categoryOffer === 0) { %>
                        <button class="btn btn-sm btn-gradient" onclick="addOfferPrompt('<%= category._id %>')">Add Offer</button>
                      <% } else { %>
                        <button class="btn btn-sm btn-outline-danger" onclick="removeOffer('<%= category._id %>')">Remove</button>
                      <% } %>
                    </td>
                    <td>
                      <% if(category.isListed) { %>
                        <span class="badge bg-success">Listed</span>
                      <% } else { %>
                        <span class="badge bg-danger">Unlisted</span>
                      <% } %>
                    </td>
                    <td>
                      <% if(category.isListed) { %>
                        <a href="#" onclick="confirmUnlist('<%= category._id %>')" class="btn btn-danger btn-sm">Unlist</a>
                      <% } else { %>
                        <a href="#" onclick="confirmList('<%= category._id %>')" class="btn btn-success btn-sm">List</a>
                      <% } %>
                    </td>
                    <td>
                      <a href="/admin/editCategory/<%= category._id %>" class="btn btn-info btn-sm">Edit</a>
                    </td>
                    <!-- <td>
                      <button class="btn btn-sm btn-danger" onclick="deleteCategory('<%= category._id %>')">Delete</button>
                    </td> -->
                  </tr>
                <% }) %>
              </tbody>
            </table>
            <div id="noResults" class="no-results" style="display: none;">
              No categories found matching your search.
            </div>
          </div>

          <div class="mt-4" id="paginationContainer">
            <nav aria-label="Page navigation">
              <ul class="pagination justify-content-center custom-pagination">
                <% for (let i = 1; i <= totalPages; i++) { %>
                  <li class="page-item <%= (i === currentPage) ? 'active' : '' %>">
                    <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                  </li>
                <% } %>
              </ul>
            </nav>
          </div>
        </div>
      </div>
    </div>
  </main>
</body>

<script>
  // Store original category data for search functionality
  const originalCategories = [];
  document.querySelectorAll('.category-row').forEach(row => {
    originalCategories.push({
      element: row,
      name: row.getAttribute('data-name'),
      description: row.getAttribute('data-description')
    });
  });

  // Handle form submission with SweetAlert confirmation
  function handleFormSubmit(event) {
    event.preventDefault();
    
    Swal.fire({
      title: 'Create Category?',
      text: 'Are you sure you want to create this category?',
      icon: 'question',
      showCancelButton: true,
      confirmButtonColor: '#6a11cb',
      cancelButtonColor: '#6c757d',
      confirmButtonText: 'Yes, create it!'
    }).then((result) => {
      if (result.isConfirmed) {
        event.target.submit();
      }
    });
  }

  // Search functionality - client-side filtering
  function searchCategories() {
    const searchTerm = document.getElementById('searchInput').value.trim().toLowerCase();
    const noResults = document.getElementById('noResults');
    const paginationContainer = document.getElementById('paginationContainer');
    
    if (searchTerm) {
      // Hide pagination when searching
      paginationContainer.classList.add('pagination-hidden');
      
      let foundResults = false;
      
      // Filter categories
      originalCategories.forEach(category => {
        const matches = category.name.includes(searchTerm) || 
                        category.description.includes(searchTerm);
        
        if (matches) {
          category.element.style.display = '';
          foundResults = true;
        } else {
          category.element.style.display = 'none';
        }
      });
      
      // Show no results message if needed
      if (!foundResults) {
        noResults.style.display = 'block';
      } else {
        noResults.style.display = 'none';
      }
    } else {
      // Show all categories and pagination when search is empty
      originalCategories.forEach(category => {
        category.element.style.display = '';
      });
      noResults.style.display = 'none';
      paginationContainer.classList.remove('pagination-hidden');
    }
  }

  // Allow pressing Enter to search
  document.getElementById('searchInput').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      searchCategories();
    }
  });

  // Clear search when input is cleared
  document.getElementById('searchInput').addEventListener('input', function(e) {
    if (e.target.value === '') {
      searchCategories();
    }
  });

  // Add offer with prompt
  function addOfferPrompt(categoryId) {
    Swal.fire({
      title: 'Add Offer',
      input: 'number',
      inputLabel: 'Offer Percentage',
      inputPlaceholder: 'Enter offer percentage (e.g., 10 for 10%)',
      inputAttributes: {
        min: 1,
        max: 100,
        step: 1
      },
      showCancelButton: true,
      confirmButtonText: 'Add Offer',
      confirmButtonColor: '#6a11cb',
      cancelButtonColor: '#6c757d',
      inputValidator: (value) => {
        if (!value) {
          return 'You need to enter a value!';
        }
        if (value < 1 || value > 100) {
          return 'Please enter a value between 1 and 100!';
        }
      }
    }).then((result) => {
      if (result.isConfirmed) {
        addOffer(categoryId, result.value);
      }
    });
  }

  // Add offer function
  function addOffer(categoryId, offerValue) {
    fetch('/admin/addCategoryOffer', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        categoryId: categoryId,
        offer: offerValue
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        Swal.fire({
          title: 'Success!',
          text: 'Offer added successfully',
          icon: 'success',
          confirmButtonColor: '#6a11cb'
        }).then(() => {
          location.reload();
        });
      } else {
        Swal.fire({
          title: 'Error!',
          text: data.message || 'Failed to add offer',
          icon: 'error',
          confirmButtonColor: '#6a11cb'
        });
      }
    })
    .catch(error => {
      Swal.fire({
        title: 'Error!',
        text: 'An error occurred while adding the offer',
        icon: 'error',
        confirmButtonColor: '#6a11cb'
      });
    });
  }

  // Remove offer with confirmation
  function removeOffer(categoryId) {
    Swal.fire({
      title: 'Remove Offer?',
      text: 'Are you sure you want to remove this offer?',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#d33',
      cancelButtonColor: '#6c757d',
      confirmButtonText: 'Yes, remove it!'
    }).then((result) => {
      if (result.isConfirmed) {
        fetch('/admin/removeCategoryOffer', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            categoryId: categoryId
          })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            Swal.fire({
              title: 'Removed!',
              text: 'Offer has been removed',
              icon: 'success',
              confirmButtonColor: '#6a11cb'
            }).then(() => {
              location.reload();
            });
          } else {
            Swal.fire({
              title: 'Error!',
              text: data.message || 'Failed to remove offer',
              icon: 'error',
              confirmButtonColor: '#6a11cb'
            });
          }
        })
        .catch(error => {
          Swal.fire({
            title: 'Error!',
            text: 'An error occurred while removing the offer',
            icon: 'error',
            confirmButtonColor: '#6a11cb'
          });
        });
      }
    });
  }

  // Confirm list action
  function confirmList(categoryId) {
    Swal.fire({
      title: 'List Category?',
      text: 'This will make the category visible to customers',
      icon: 'question',
      showCancelButton: true,
      confirmButtonColor: '#28a745',
      cancelButtonColor: '#6c757d',
      confirmButtonText: 'Yes, list it!'
    }).then((result) => {
      if (result.isConfirmed) {
        window.location.href = `/admin/listCategory?id=${categoryId}`;
      }
    });
  }

  // Confirm unlist action
  function confirmUnlist(categoryId) {
    Swal.fire({
      title: 'Unlist Category?',
      text: 'This will hide the category from customers',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#d33',
      cancelButtonColor: '#6c757d',
      confirmButtonText: 'Yes, unlist it!'
    }).then((result) => {
      if (result.isConfirmed) {
        window.location.href = `/admin/unlistCategory?id=${categoryId}`;
      }
    });
  }

  // Delete category with confirmation
  function deleteCategory(categoryId) {
    Swal.fire({
      title: 'Delete Category?',
      text: 'This action cannot be undone!',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#d33',
      cancelButtonColor: '#6c757d',
      confirmButtonText: 'Yes, delete it!'
    }).then((result) => {
      if (result.isConfirmed) {
        fetch(`/admin/deleteCategory?id=${categoryId}`, {
          method: 'DELETE'
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            Swal.fire({
              title: 'Deleted!',
              text: 'Category has been deleted',
              icon: 'success',
              confirmButtonColor: '#6a11cb'
            }).then(() => {
              location.reload();
            });
          } else {
            Swal.fire({
              title: 'Error!',
              text: data.message || 'Failed to delete category',
              icon: 'error',
              confirmButtonColor: '#6a11cb'
            });
          }
        })
        .catch(error => {
          Swal.fire({
            title: 'Error!',
            text: 'An error occurred while deleting the category',
            icon: 'error',
            confirmButtonColor: '#6a11cb'
          });
        });
      }
    });
  }
</script>